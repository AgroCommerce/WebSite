// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // url      = "file:./dev.db"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String   @map("nome")
  cpf       BigInt   @unique
  email     String   @unique
  password  String   @map("senha")
  roles     Role     @default(USER) @map("cargo") // change to enum on mysql
  createdAt DateTime @default(now())

  producer         Producer?
  shoppingCart     ShoppingCart[]
  likedProducts    LikedProducts[]
  userAddress      UserAddress[]
  recreatePassword RecreatePassword[]
  sales            Sales[]

  @@map("usuarios")
}

// model InteractionUser {
//   id           Int      @id @default(autoincrement())
//   liked        Boolean  @default(false) @map("curtido")
//   shoppingCart Boolean  @default(false) @map("carrinho-de-compras")
//   createdAt    DateTime @default(now()) @map("criado-em")
//   userId       String   @map("usuario_id")
//   productId    Int?     @map("produto_id")

//   product Product? @relation(fields: [productId], references: [id])
//   user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map("interacao-usuario")
// }

model LikedProducts {
  id        Int      @id @default(autoincrement())
  userId    String   @map("usuario_id")
  productId Int       @map("produto_id")
  createdAt DateTime @default(now()) @map("criado-em")

  product Product[]
  user    User      @relation(fields: [userId], references: [id])

  @@map("produtos-curtidos")
}

model ShoppingCart {
  id        Int      @id @default(autoincrement())
  userId    String   @map("usuario_id")
  productId Int      @map("produto_id")
  createdAt DateTime @default(now()) @map("criado-em")

  product Product[]
  user    User      @relation(fields: [userId], references: [id])

  @@map("carrinho-de-compras")
}

model UserAddress {
  id            Int    @id @default(autoincrement())
  userId        String @map("usuario_id")
  address       String @map("endereco")
  numberAddress Int    @map("numero")
  district      String @map("bairro")
  city          String @map("cidade")
  estate        String @map("estado")
  country       String @map("pais")
  cep           BigInt @map("cep")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("endereco-usuario")
}

model Producer {
  id          String @id @default(uuid())
  userId      String @unique
  companyName String @map("razao-social")
  cnpj        BigInt @unique
  telephone   BigInt @map("telefone")

  user    User      @relation(fields: [userId], references: [id])
  Product Product[]

  @@map("produtores")
}

model RecreatePassword {
  email           String   @unique
  token           String
  createdAt       DateTime @default(now()) @map("criado-em")
  newPasswordUser String   @map("nova-senha-usuario")
  userId          String   @map("usuario_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email, token])
  @@map("recriar-senha")
}

model Product {
  id              Int      @id @default(autoincrement())
  description     String   @map("descricao")
  title           String   @map("titulo")
  price           Decimal  @map("preco")
  quantity        BigInt   @map("quantidade")
  keyWords        String   @map("palavras-chaves")
  createdAt       DateTime @default(now()) @map("criado-em")
  producerId      String   @map("produtor_id")
  shoppingCartId  Int?
  likedProductsId Int?

  productReviews ProductReviews[]

  producer      Producer       @relation(fields: [producerId], references: [id])
  shoppingCart  ShoppingCart?  @relation(fields: [shoppingCartId], references: [id])
  LikedProducts LikedProducts? @relation(fields: [likedProductsId], references: [id])

  @@map("produtos")
}

model ProductReviews {
  id            Int      @id @default(autoincrement())
  title         String   @map("titulo")
  description   String   @map("descricao")
  numberReviews Int      @map("numero-avaliacoes")
  productId     Int      @map("produto_id")
  createdAt     DateTime @default(now()) @map("criado-em")

  product Product @relation(fields: [productId], references: [id])

  @@map("comentario-produtos")
}

model Sales {
  id        BigInt   @id @default(autoincrement())
  userId    String
  productId Int
  soldIn    DateTime @default(now()) @map("vendido-em")

  user User @relation(fields: [userId], references: [id])

  @@map("vendas")
}

enum Role {
  ADMIN
  PRODUCER
  USER
}
