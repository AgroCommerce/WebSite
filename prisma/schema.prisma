// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
  // url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  producerId String?  @map("produtor_id")
  name       String   @map("nome")
  cpf        String   @unique
  email      String   @unique
  password   String   @map("senha")
  roles      String   @default("USER") @map("cargo") // change to enum on mysql
  createdAt  DateTime @default(now())

  producer Producer? @relation(fields: [producerId], references: [id], onDelete: Cascade)

  userAddress      UserAddress[]
  interactionUser  InteractionUser[]
  recreatePassword RecreatePassword[]
  logSales         LogSales[]

  @@map("usuarios")
}

model InteractionUser {
  id           BigInt   @id @default(autoincrement())
  liked        Boolean  @map("curtido")
  shoppingCart Boolean  @map("carrinho-de-compras")
  createdAt    DateTime @default(now()) @map("criado-em")
  userId       String   @map("cliente_id")
  productId    BigInt   @map("produto_id")

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("interacao-usuario")
}

model UserAddress {
  id            BigInt @id @default(autoincrement())
  userId        String @map("cliente_id")
  address       String @map("endereco")
  numberAddress Int    @map("numero")
  district      String @map("bairro")
  city          String @map("cidade")
  estate        String @map("estado")
  country       String @map("pais")
  CEP           String @map("cep")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("endereco-usuario")
}

model Producer {
  id          String @id @default(uuid())
  companyName String @map("razao-social")
  cnpj        String @unique
  telephone   BigInt @map("telefone")

  Product Product[]
  User    User[]

  @@map("produtores")
}

model RecreatePassword {
  email           String   @unique
  token           String
  createdAt       DateTime @default(now()) @map("criado-em")
  newPasswordUser String   @map("nova-senha-usuario")
  productorId     String   @map("produtor_id")
  userId          String   @map("cliente_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email, token])
  @@map("recriar-senha")
}

model Product {
  id          BigInt   @id @default(autoincrement())
  description String   @map("descricao")
  title       String   @map("titulo")
  price       Decimal  @map("preco")
  quantity    BigInt   @map("quantidade")
  createdAt   DateTime @default(now()) @map("criado-em")
  producerId  String   @map("produtor_id")
  logVendaId  BigInt

  interactionUser InteractionUser[]
  productReviews  productReviews[]

  producer Producer @relation(fields: [producerId], references: [id])
  logSales LogSales @relation(fields: [logVendaId], references: [id])

  @@map("produtos")
}

model productReviews {
  id            BigInt   @id @default(autoincrement())
  title         String   @map("titulo")
  description   String   @map("descricao")
  numberReviews Int      @map("numero-avaliacoes")
  productId     BigInt   @map("produto_id")
  createdAt     DateTime @default(now()) @map("criado-em")

  product Product @relation(fields: [productId], references: [id])

  @@map("comentario-produtos")
}

model LogSales {
  id      BigInt    @id @default(autoincrement())
  userId  String
  soldIn  DateTime  @default(now()) @map("vendido-em")
  Product Product[]

  user User @relation(fields: [userId], references: [id])

  @@map("log-vendas")
}

// enum Role {
//   ADMIN
//   PRODUCER
//   USER
// }
