// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  // url      = "file:./dev.db"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String   @map("nome")
  cpf       String   @unique
  email     String   @unique
  password  String   @map("senha")
  role      Role     @default(USER) @map("cargo") // change to enum on mysql
  cellphone BigInt?  @map("celular")
  birthDate DateTime @map("data-nascimento")
  gender    Genders? @map("genero")
  createdAt DateTime @default(now())

  producer      Producer?
  shoppingCart  ShoppingCart[]
  likedProducts LikedProducts[]
  userAddress   UserAddress[]
  sales         Sales[]

  @@map("usuarios")
}

model LikedProducts {
  id        Int      @id @default(autoincrement())
  userId    String   @map("usuario_id")
  productId Int      @map("produto_id")
  createdAt DateTime @default(now()) @map("criado-em")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("produtos-curtidos")
}

model ShoppingCart {
  id        Int      @id @default(autoincrement())
  userId    String   @map("usuario_id")
  productId Int      @map("produto_id")
  createdAt DateTime @default(now()) @map("criado-em")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("carrinho-de-compras")
}

model UserAddress {
  id            Int    @id @default(autoincrement())
  receiverName  String @map("nome-destinatario")
  userId        String @map("usuario_id")
  address       String @map("endereco")
  typeAddress   String @map("tipo-endereco")
  numberAddress Int    @map("numero")
  district      String @map("bairro")
  city          String @map("cidade")
  state         String @map("estado")
  country       String @map("pais")
  cep           BigInt @map("cep")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("endereco-usuario")
}

model Producer {
  id          String @id @default(uuid())
  userId      String @unique
  companyName String @map("razao-social")
  cnpj        BigInt @unique
  telephone   BigInt @map("telefone")

  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Product Product[]

  @@map("produtores")
}

model Product {
  id          Int      @id @default(autoincrement())
  description String   @map("descricao")
  title       String   @map("titulo")
  price       Decimal  @map("preco")
  quantity    Int      @map("quantidade")
  productCost Decimal  @map("custo-produto")
  offer       Decimal? @default(0.00) @map("oferta")
  keyWords    String   @map("palavras-chaves")
  imgUrl      String[] @map("url-imagem")
  createdAt   DateTime @default(now()) @map("criado-em")
  producerId  String   @map("produtor_id")

  sales         ProductForSale[]
  LikedProducts LikedProducts[]
  shoppingCart  ShoppingCart[]

  producer Producer @relation(fields: [producerId], references: [id], onDelete: Cascade)

  @@map("produtos")
}

model Sales {
  id            Int              @id @default(autoincrement())
  userId        String           @map("usuario_id")
  userAddressId Int              @map("endereco-cliente-id")
  products      ProductForSale[]
  total         Decimal          @map("total")
  status        Status           @default(PAYMENT_PENDING) @map("status-pedido")
  paymentMethod PaymentMethod    @map("forma-pagamento")
  soldIn        DateTime         @default(now()) @map("vendido-em")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("vendas")
}

model ProductForSale {
  id        Int    @id @default(autoincrement())
  productId Int    @map("produto_id")
  salesId   Int?   @map("venda_id")
  quantity  BigInt @map("quantidade")

  sales   Sales?  @relation(fields: [salesId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("produtos-venda")
}

enum Role {
  ADMIN
  PRODUCER
  USER
}

enum Status {
  PAYMENT_PENDING
  PAYMENT_APPROVED
  PAYMENT_REJECTED
  SHIPPED
  DELIVERED
  CANCELED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PIX
  BOLETO
}

enum Genders {
  MASC
  FEM
  OTHER
  NOTTOSAY
}
